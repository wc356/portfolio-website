{"ast":null,"code":"var _jsxFileName = \"/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport resume from \"../database/resume\";\n\nconst Resume = () => {\n  const values = Object.values(resume);\n\n  function renderSectionName() {\n    return __jsx(\"div\", {\n      className: \"jsx-1078575079\" + \" \" + \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }\n    }, __jsx(\"h1\", {\n      className: \"jsx-1078575079\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }, values[0]), __jsx(_JSXStyle, {\n      id: \"1078575079\",\n      __self: this\n    }, \".name.jsx-1078575079{display:block;font-size:2.6rem;padding-top:1rem;white-space:nowrap;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */\"));\n  }\n\n  function renderSectionBtn() {\n    return __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"4192922608\", [values[9].highlight, values[9].highlight, values[9].highlight]]]) + \" \" + \"btn-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, __jsx(\"a\", {\n      href: values[10][1],\n      target: \"_blank\",\n      className: _JSXStyle.dynamic([[\"4192922608\", [values[9].highlight, values[9].highlight, values[9].highlight]]]) + \" \" + \"btn-download\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, values[10][0]), __jsx(_JSXStyle, {\n      id: \"4192922608\",\n      dynamic: [values[9].highlight, values[9].highlight, values[9].highlight],\n      __self: this\n    }, `a.__jsx-style-dynamic-selector{color:${values[9].highlight};-webkit-text-decoration:none;text-decoration:none;font-weight:500;display:block;-webkit-transition:all 0.15s;transition:all 0.15s;}a.__jsx-style-dynamic-selector:hover{-webkit-transform:translateY(-3px);-ms-transform:translateY(-3px);transform:translateY(-3px);}.btn-wrapper.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;position:-webkit-sticky;top:4rem;}.btn-download.__jsx-style-dynamic-selector{display:inline-block;position:relative;left:-10rem;white-space:nowrap;color:white;background-color:${values[9].highlight};padding:0.5rem;border-radius:0 0.7rem 0 0.7rem;box-shadow:${values[9].highlight} 0 0 10px 0;}.btn-download.__jsx-style-dynamic-selector:hover{background-color:pink;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n  }\n\n  function renderExperience(expType) {\n    const renderifLocationExist = exp => exp.location && __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \", \", __jsx(\"span\", {\n      className: \"jsx-1259205619\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, exp.location), __jsx(_JSXStyle, {\n      id: \"1259205619\",\n      __self: this\n    }, \"span.jsx-1259205619{color:gray;font-weight:500;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */\"));\n\n    const renderGithubLink = (exp, expType) => {\n      switch (expType) {\n        case \"professional\":\n          return \"\";\n\n        case \"project\":\n          return __jsx(Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 13\n            }\n          }, \"-\", \" \", __jsx(\"a\", {\n            href: exp.link[1],\n            target: \"_blank\",\n            rel: \"nofollow noopener noreferrer\",\n            className: _JSXStyle.dynamic([[\"776407391\", [values[9].highlight]]]),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }\n          }, exp.link[0]), __jsx(_JSXStyle, {\n            id: \"776407391\",\n            dynamic: [values[9].highlight],\n            __self: this\n          }, `a.__jsx-style-dynamic-selector{display:inline-block;font-size:17px;-webkit-text-decoration:none;text-decoration:none;position:relative;-webkit-transition:all 0.15s;transition:all 0.15s;}a.__jsx-style-dynamic-selector::after{position:absolute;height:2px;width:100%;margin:0 auto;left:0;right:0;background:${values[9].highlight};content:\"\";bottom:0;-o-transition:0.15s;-ms-transition:0.15s;-moz-transition:0.15s;-webkit-transition:0.15s;-webkit-transition:0.15s;transition:0.15s;}a.__jsx-style-dynamic-selector:hover.__jsx-style-dynamic-selector::after{width:20%;background:red;}a.__jsx-style-dynamic-selector:visited{color:black;}@media print{a[href].__jsx-style-dynamic-selector::before{display:inline-block;color:gray;font-size:15px;font-weight:500;content:\"(\" attr(href) \")\";white-space:nowrap;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n      }\n    };\n\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, __jsx(\"h3\", {\n      className: _JSXStyle.dynamic([[\"1760692510\", [values[9].highlight, values[9].body]]]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, expType.toUpperCase(), \" EXPERIENCE\"), values[3][expType].map(exp => {\n      return __jsx(\"div\", {\n        key: uuidv4(),\n        className: _JSXStyle.dynamic([[\"1760692510\", [values[9].highlight, values[9].body]]]) + \" \" + \"project\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }\n      }, __jsx(\"h2\", {\n        className: _JSXStyle.dynamic([[\"1760692510\", [values[9].highlight, values[9].body]]]) + \" \" + \"project-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }\n      }, `${exp.company} — ${exp.title}`, renderifLocationExist(exp), \" \", renderGithubLink(exp, expType)), __jsx(\"p\", {\n        className: _JSXStyle.dynamic([[\"1760692510\", [values[9].highlight, values[9].body]]]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }\n      }, exp.subTitle), __jsx(\"ul\", {\n        className: _JSXStyle.dynamic([[\"1760692510\", [values[9].highlight, values[9].body]]]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }\n      }, exp.description.map(desc => __jsx(\"li\", {\n        key: uuidv4(),\n        className: _JSXStyle.dynamic([[\"1760692510\", [values[9].highlight, values[9].body]]]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 19\n        }\n      }, desc))));\n    }), __jsx(_JSXStyle, {\n      id: \"1760692510\",\n      dynamic: [values[9].highlight, values[9].body],\n      __self: this\n    }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}h2.__jsx-style-dynamic-selector{font-size:20px;}ul.__jsx-style-dynamic-selector{margin-left:15px;}li.__jsx-style-dynamic-selector{padding:5px;color:${values[9].body};}span.__jsx-style-dynamic-selector{font-size:17px;color:gray;}.project.__jsx-style-dynamic-selector{margin:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n  }\n\n  const renderSectionEducation = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]) + \" \" + \"education\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]) + \" \" + \"highlight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, \"EDUCATION\"), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]) + \" \" + \"education\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, values[2].school + \" \", __jsx(\"span\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, values[2].location)), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, values[2].subTitle), __jsx(\"ul\", {\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, values[2].description.map(desc => __jsx(\"li\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"677716461\", [values[9].highlight, values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, desc)))), __jsx(_JSXStyle, {\n    id: \"677716461\",\n    dynamic: [values[9].highlight, values[9].highlight, values[9].body],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}.highlight.__jsx-style-dynamic-selector{color:${values[9].highlight};}span.__jsx-style-dynamic-selector{color:gray;font-weight:500;}ul.__jsx-style-dynamic-selector{margin-left:15px;}li.__jsx-style-dynamic-selector{color:${values[9].body};}h2.__jsx-style-dynamic-selector{font-size:20px;}.education.__jsx-style-dynamic-selector{margin:10px 10px 0 10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  const renderSectionContact = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"contact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }\n  }, __jsx(\"ul\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, values[1].links.map(link => __jsx(\"li\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"hover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    href: link[1],\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\",\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, link[0]))), values[1].notLinks.map(notLink => __jsx(\"p\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, notLink))), __jsx(_JSXStyle, {\n    id: \"2088380838\",\n    dynamic: [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}a.__jsx-style-dynamic-selector{color:${values[9].highlight};-webkit-text-decoration:none;text-decoration:none;font-weight:500;}li.__jsx-style-dynamic-selector,p.__jsx-style-dynamic-selector{color:${values[9].body};}span.__jsx-style-dynamic-selector{color:gray;font-size:20px;}.background.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:6rem;}.btn-wrapper.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;position:-webkit-sticky;top:4rem;}.btn-download.__jsx-style-dynamic-selector{display:inline-block;position:relative;left:-10rem;white-space:nowrap;color:white;background-color:${values[9].highlight};padding:0.5rem;border-radius:0 0.7rem 0 0.7rem;box-shadow:${values[9].highlight} 0 0 10px 0;}.btn-download.__jsx-style-dynamic-selector:hover{background-color:pink;}.name.__jsx-style-dynamic-selector{display:block;font-size:2.6rem;padding-top:1rem;white-space:nowrap;}.professional-exp.__jsx-style-dynamic-selector{padding-top:4rem;}.page-content.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;}.left-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}.right-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.contact.__jsx-style-dynamic-selector{font-size:14px;margin:9px 0 20px 15px;white-space:nowrap;}a.__jsx-style-dynamic-selector{display:block;-webkit-transition:all 0.15s;transition:all 0.15s;}a.__jsx-style-dynamic-selector:hover{-webkit-transform:translateY(-3px);-ms-transform:translateY(-3px);transform:translateY(-3px);}.subsection.__jsx-style-dynamic-selector{padding:15px;}.title.__jsx-style-dynamic-selector{margin-bottom:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  const renderSectionTechnology = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"technology subsection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }\n  }, \"TECHNOLOGY\"), __jsx(\"ul\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }\n  }, values[4].map(tech => __jsx(\"li\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 11\n    }\n  }, tech))), __jsx(_JSXStyle, {\n    id: \"2088380838\",\n    dynamic: [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}a.__jsx-style-dynamic-selector{color:${values[9].highlight};-webkit-text-decoration:none;text-decoration:none;font-weight:500;}li.__jsx-style-dynamic-selector,p.__jsx-style-dynamic-selector{color:${values[9].body};}span.__jsx-style-dynamic-selector{color:gray;font-size:20px;}.background.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:6rem;}.btn-wrapper.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;position:-webkit-sticky;top:4rem;}.btn-download.__jsx-style-dynamic-selector{display:inline-block;position:relative;left:-10rem;white-space:nowrap;color:white;background-color:${values[9].highlight};padding:0.5rem;border-radius:0 0.7rem 0 0.7rem;box-shadow:${values[9].highlight} 0 0 10px 0;}.btn-download.__jsx-style-dynamic-selector:hover{background-color:pink;}.name.__jsx-style-dynamic-selector{display:block;font-size:2.6rem;padding-top:1rem;white-space:nowrap;}.professional-exp.__jsx-style-dynamic-selector{padding-top:4rem;}.page-content.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;}.left-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}.right-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.contact.__jsx-style-dynamic-selector{font-size:14px;margin:9px 0 20px 15px;white-space:nowrap;}a.__jsx-style-dynamic-selector{display:block;-webkit-transition:all 0.15s;transition:all 0.15s;}a.__jsx-style-dynamic-selector:hover{-webkit-transform:translateY(-3px);-ms-transform:translateY(-3px);transform:translateY(-3px);}.subsection.__jsx-style-dynamic-selector{padding:15px;}.title.__jsx-style-dynamic-selector{margin-bottom:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  const renderSectionHonors = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"honors subsection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }\n  }, \"HONORS\"), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }\n  }, values[5].title), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }\n  }, values[5].description), __jsx(_JSXStyle, {\n    id: \"2088380838\",\n    dynamic: [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}a.__jsx-style-dynamic-selector{color:${values[9].highlight};-webkit-text-decoration:none;text-decoration:none;font-weight:500;}li.__jsx-style-dynamic-selector,p.__jsx-style-dynamic-selector{color:${values[9].body};}span.__jsx-style-dynamic-selector{color:gray;font-size:20px;}.background.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:6rem;}.btn-wrapper.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;position:-webkit-sticky;top:4rem;}.btn-download.__jsx-style-dynamic-selector{display:inline-block;position:relative;left:-10rem;white-space:nowrap;color:white;background-color:${values[9].highlight};padding:0.5rem;border-radius:0 0.7rem 0 0.7rem;box-shadow:${values[9].highlight} 0 0 10px 0;}.btn-download.__jsx-style-dynamic-selector:hover{background-color:pink;}.name.__jsx-style-dynamic-selector{display:block;font-size:2.6rem;padding-top:1rem;white-space:nowrap;}.professional-exp.__jsx-style-dynamic-selector{padding-top:4rem;}.page-content.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;}.left-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}.right-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.contact.__jsx-style-dynamic-selector{font-size:14px;margin:9px 0 20px 15px;white-space:nowrap;}a.__jsx-style-dynamic-selector{display:block;-webkit-transition:all 0.15s;transition:all 0.15s;}a.__jsx-style-dynamic-selector:hover{-webkit-transform:translateY(-3px);-ms-transform:translateY(-3px);transform:translateY(-3px);}.subsection.__jsx-style-dynamic-selector{padding:15px;}.title.__jsx-style-dynamic-selector{margin-bottom:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  const renderSectionLanguages = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"languages subsection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]) + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }\n  }, \"LANGUAGES\"), __jsx(\"ul\", {\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }\n  }, values[6].map(lang => __jsx(\"li\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"2088380838\", [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 11\n    }\n  }, lang))), __jsx(_JSXStyle, {\n    id: \"2088380838\",\n    dynamic: [values[9].highlight, values[9].highlight, values[9].body, values[9].highlight, values[9].highlight],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}a.__jsx-style-dynamic-selector{color:${values[9].highlight};-webkit-text-decoration:none;text-decoration:none;font-weight:500;}li.__jsx-style-dynamic-selector,p.__jsx-style-dynamic-selector{color:${values[9].body};}span.__jsx-style-dynamic-selector{color:gray;font-size:20px;}.background.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:6rem;}.btn-wrapper.__jsx-style-dynamic-selector{position:-webkit-sticky;position:sticky;position:-webkit-sticky;top:4rem;}.btn-download.__jsx-style-dynamic-selector{display:inline-block;position:relative;left:-10rem;white-space:nowrap;color:white;background-color:${values[9].highlight};padding:0.5rem;border-radius:0 0.7rem 0 0.7rem;box-shadow:${values[9].highlight} 0 0 10px 0;}.btn-download.__jsx-style-dynamic-selector:hover{background-color:pink;}.name.__jsx-style-dynamic-selector{display:block;font-size:2.6rem;padding-top:1rem;white-space:nowrap;}.professional-exp.__jsx-style-dynamic-selector{padding-top:4rem;}.page-content.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;}.left-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}.right-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.contact.__jsx-style-dynamic-selector{font-size:14px;margin:9px 0 20px 15px;white-space:nowrap;}a.__jsx-style-dynamic-selector{display:block;-webkit-transition:all 0.15s;transition:all 0.15s;}a.__jsx-style-dynamic-selector:hover{-webkit-transform:translateY(-3px);-ms-transform:translateY(-3px);transform:translateY(-3px);}.subsection.__jsx-style-dynamic-selector{padding:15px;}.title.__jsx-style-dynamic-selector{margin-bottom:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  const renderSectionInterests = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]) + \" \" + \"interests subsection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]) + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 7\n    }\n  }, \"INTERESTS\"), __jsx(\"ul\", {\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 7\n    }\n  }, values[7].map(int => __jsx(\"li\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 11\n    }\n  }, int))), __jsx(_JSXStyle, {\n    id: \"2633117728\",\n    dynamic: [values[9].highlight, values[9].body],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}li.__jsx-style-dynamic-selector{color:${values[9].body};}.subsection.__jsx-style-dynamic-selector{padding:15px;}.title.__jsx-style-dynamic-selector{margin-bottom:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  const renderSectionHobbies = () => __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]) + \" \" + \"hobbies subsection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]) + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }\n  }, \"HOBBIES\"), __jsx(\"ul\", {\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 7\n    }\n  }, values[8].map(hobby => __jsx(\"li\", {\n    key: uuidv4(),\n    className: _JSXStyle.dynamic([[\"2633117728\", [values[9].highlight, values[9].body]]]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 11\n    }\n  }, hobby))), __jsx(_JSXStyle, {\n    id: \"2633117728\",\n    dynamic: [values[9].highlight, values[9].body],\n    __self: this\n  }, `h3.__jsx-style-dynamic-selector{color:${values[9].highlight};}li.__jsx-style-dynamic-selector{color:${values[9].body};}.subsection.__jsx-style-dynamic-selector{padding:15px;}.title.__jsx-style-dynamic-selector{margin-bottom:10px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n\n  return __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 7\n    }\n  }, renderSectionBtn(), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 9\n    }\n  }, __jsx(\"section\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"left-column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 11\n    }\n  }, renderSectionName(), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"professional-exp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 13\n    }\n  }, renderExperience(\"professional\")), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"project-exp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 13\n    }\n  }, renderExperience(\"project\")), renderSectionEducation()), __jsx(\"section\", {\n    className: _JSXStyle.dynamic([[\"1636025315\", [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow]]]) + \" \" + \"right-column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 11\n    }\n  }, renderSectionContact(), renderSectionTechnology(), renderSectionHonors(), renderSectionLanguages(), renderSectionInterests(), renderSectionHobbies()))), __jsx(_JSXStyle, {\n    id: \"1636025315\",\n    dynamic: [values[9].highlight, values[9].highlight, values[9].border, values[9].shadow],\n    __self: this\n  }, `.background.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100vh;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:6rem;}.page.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;zoom:0.75;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;border-top:7px solid ${values[9].highlight};border-bottom:7px solid ${values[9].highlight};padding:4.3rem;padding-top:1.53rem;max-width:1200px;line-height:1.8;border-left:1px solid ${values[9].border};box-shadow:10px 10px 10px ${values[9].shadow};height:100%;}.professional-exp.__jsx-style-dynamic-selector{padding-top:4rem;}.page-content.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100%;}.left-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}.right-column.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-height:100%;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media only screen and (max-width:900px){.background.__jsx-style-dynamic-selector{padding:0;}.page.__jsx-style-dynamic-selector{padding:1.2rem;}.page-content.__jsx-style-dynamic-selector{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.professional-exp.__jsx-style-dynamic-selector{padding:0;}}@media print{.background.__jsx-style-dynamic-selector{padding:0;}.page.__jsx-style-dynamic-selector{border-left:none;box-shadow:none;line-height:1.5;}.professional-exp.__jsx-style-dynamic-selector{padding-top:48px;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js */`));\n};\n\nexport default Resume;","map":{"version":3,"sources":["/Users/wooyoungchoi/Desktop/Code/React/portfolio-website/components/Resume.js"],"names":["React","Fragment","v4","uuidv4","resume","Resume","values","Object","renderSectionName","renderSectionBtn","highlight","renderExperience","expType","renderifLocationExist","exp","location","renderGithubLink","link","body","toUpperCase","map","company","title","subTitle","description","desc","renderSectionEducation","school","renderSectionContact","links","notLinks","notLink","renderSectionTechnology","tech","renderSectionHonors","renderSectionLanguages","lang","renderSectionInterests","int","renderSectionHobbies","hobby","border","shadow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAMC,MAAM,GAAGC,MAAM,CAACD,MAAP,CAAcF,MAAd,CAAf;;AAEA,WAASI,iBAAT,GAA6B;AAC3B,WACE;AAAA,0CAAe,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,MAAM,CAAC,CAAD,CAAX,CADF;AAAA;AAAA;AAAA,y65BADF;AAeD;;AAED,WAASG,gBAAT,GAA4B;AAC1B,WACE;AAAA,oDAOiBH,MAAM,CAAC,CAAD,CAAN,CAAUI,SAP3B,EA2B4BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3BtC,EA8BsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9BhC,aAAe,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAA4B,MAAA,IAAI,EAAEJ,MAAM,CAAC,EAAD,CAAN,CAAW,CAAX,CAAlC;AAAiD,MAAA,MAAM,EAAC,QAAxD;AAAA,oDAMeA,MAAM,CAAC,CAAD,CAAN,CAAUI,SANzB,EA0B0BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1BpC,EA6BoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7B9B,aAAa,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,MAAM,CAAC,EAAD,CAAN,CAAW,CAAX,CADH,CADF;AAAA;AAAA,gBAOiBA,MAAM,CAAC,CAAD,CAAN,CAAUI,SAP3B,EA2B4BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3BtC,EA8BsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9BhC;AAAA;AAAA,+CAOiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAP3B,4gBA2B4BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3BtC,8DA8BsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9BhC;;+FAAA,EADF;AAwCD;;AAED,WAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACjC,UAAMC,qBAAqB,GAAIC,GAAD,IAC5BA,GAAG,CAACC,QAAJ,IACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,GAAG,CAACC,QAAX,CADJ;AAAA;AAAA;AAAA,g35BAFJ;;AAeA,UAAMC,gBAAgB,GAAG,CAACF,GAAD,EAAMF,OAAN,KAAkB;AACzC,cAAQA,OAAR;AACE,aAAK,cAAL;AACE,iBAAO,EAAP;;AACF,aAAK,SAAL;AACE,iBACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,GADJ,EAEE;AACE,YAAA,IAAI,EAAEE,GAAG,CAACG,IAAJ,CAAS,CAAT,CADR;AAEE,YAAA,MAAM,EAAC,QAFT;AAGE,YAAA,GAAG,EAAC,8BAHN;AAAA,yDAuBoBX,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvB9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAKGI,GAAG,CAACG,IAAJ,CAAS,CAAT,CALH,CAFF;AAAA;AAAA,sBAyBsBX,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzBhC;AAAA;AAAA,gUAyBsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzBhC;;+FAAA,EADF;AAJJ;AA8DD,KA/DD;;AAiEA,WACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA,oDAoBeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApBzB,EA8BeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA9BzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,OAAO,CAACO,WAAR,EAAL,gBADF,EAEGb,MAAM,CAAC,CAAD,CAAN,CAAUM,OAAV,EAAmBQ,GAAnB,CAAwBN,GAAD,IAAS;AAC/B,aACE;AAAK,QAAA,GAAG,EAAEX,MAAM,EAAhB;AAAA,sDAiBWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjBrB,EA2BWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA3BrB,aAA8B,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA,sDAgBSZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhBnB,EA0BSJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA1BnB,aAAc,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,GAAEJ,GAAG,CAACO,OAAQ,MAAKP,GAAG,CAACQ,KAAM,EADjC,EAEGT,qBAAqB,CAACC,GAAD,CAFxB,OAEgCE,gBAAgB,CAACF,GAAD,EAAMF,OAAN,CAFhD,CADF,EAKE;AAAA,sDAYSN,MAAM,CAAC,CAAD,CAAN,CAAUI,SAZnB,EAsBSJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAtBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIJ,GAAG,CAACS,QAAR,CALF,EAME;AAAA,sDAWSjB,MAAM,CAAC,CAAD,CAAN,CAAUI,SAXnB,EAqBSJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IArBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGJ,GAAG,CAACU,WAAJ,CAAgBJ,GAAhB,CAAqBK,IAAD,IACnB;AAAI,QAAA,GAAG,EAAEtB,MAAM,EAAf;AAAA,sDASKG,MAAM,CAAC,CAAD,CAAN,CAAUI,SATf,EAmBKJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAnBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoBO,IAApB,CADD,CADH,CANF,CADF;AAcD,KAfA,CAFH;AAAA;AAAA,gBAqBiBnB,MAAM,CAAC,CAAD,CAAN,CAAUI,SArB3B,EA+BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA/B3B;AAAA;AAAA,gDAqBiBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SArB3B,yJA+BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA/B3B;;+FAAA,EADF;AA6CD;;AAED,QAAMQ,sBAAsB,GAAG,MAC7B;AAAA,iDAiBiBpB,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjB3B,EAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApB3B,EA8BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA9B3B,aAAe,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,iDAgBeZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhBzB,EAmBeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAnBzB,EA6BeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA7BzB,aAAc,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA,iDAeeZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAfzB,EAkBeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAlBzB,EA4BeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA5BzB,aAAe,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,iDAcaZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAdvB,EAiBaJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjBvB,EA2BaJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA3BvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,MAAM,CAAC,CAAD,CAAN,CAAUqB,MAAV,GAAmB,GADtB,EAEE;AAAA,iDAYWrB,MAAM,CAAC,CAAD,CAAN,CAAUI,SAZrB,EAeWJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAfrB,EAyBWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAzBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOZ,MAAM,CAAC,CAAD,CAAN,CAAUS,QAAjB,CAFF,CADF,EAKE;AAAA,iDAUaT,MAAM,CAAC,CAAD,CAAN,CAAUI,SAVvB,EAaaJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAbvB,EAuBaJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAvBvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIZ,MAAM,CAAC,CAAD,CAAN,CAAUiB,QAAd,CALF,EAME;AAAA,iDASajB,MAAM,CAAC,CAAD,CAAN,CAAUI,SATvB,EAYaJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAZvB,EAsBaJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAtBvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,MAAM,CAAC,CAAD,CAAN,CAAUkB,WAAV,CAAsBJ,GAAtB,CAA2BK,IAAD,IACzB;AAAI,IAAA,GAAG,EAAEtB,MAAM,EAAf;AAAA,iDAOSG,MAAM,CAAC,CAAD,CAAN,CAAUI,SAPnB,EAUSJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAVnB,EAoBSJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IApBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBO,IAApB,CADD,CADH,CANF,CAFF;AAAA;AAAA,cAiBiBnB,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjB3B,EAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApB3B,EA8BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA9B3B;AAAA;AAAA,8CAiBiBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjB3B,mDAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApB3B,2JA8BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA9B3B;;+FAAA,EADF;;AA4CA,QAAMU,oBAAoB,GAAG,MAC3B;AAAA,kDAoBiBtB,MAAM,CAAC,CAAD,CAAN,CAAUI,SApB3B,EAuBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvB3B,EA6BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA7B3B,EAuD4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvDtC,EA0DsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1DhC,aAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDAmBeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAnBzB,EAsBeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAtBzB,EA4BeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA5BzB,EAsD0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAtDpC,EAyDoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,MAAM,CAAC,CAAD,CAAN,CAAUuB,KAAV,CAAgBT,GAAhB,CAAqBH,IAAD,IACnB;AAAI,IAAA,GAAG,EAAEd,MAAM,EAAf;AAAA,kDAiBWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjBrB,EAoBWJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApBrB,EA0BWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA1BrB,EAoDsBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApDhC,EAuDgBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvD1B,aAA6B,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAEO,IAAI,CAAC,CAAD,CADZ;AAEE,IAAA,MAAM,EAAC,QAFT;AAGE,IAAA,GAAG,EAAC,8BAHN;AAAA,kDAgBSX,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhBnB,EAmBSJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAnBnB,EAyBSJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAzBnB,EAmDoBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAnD9B,EAsDcJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAtDxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGO,IAAI,CAAC,CAAD,CALP,CADF,CADD,CADH,EAYGX,MAAM,CAAC,CAAD,CAAN,CAAUwB,QAAV,CAAmBV,GAAnB,CAAwBW,OAAD,IACtB;AAAG,IAAA,GAAG,EAAE5B,MAAM,EAAd;AAAA,kDAMWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SANrB,EASWJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATrB,EAeWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAfrB,EAyCsBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzChC,EA4CgBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA5C1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBqB,OAAnB,CADD,CAZH,CADF;AAAA;AAAA,cAoBiBzB,MAAM,CAAC,CAAD,CAAN,CAAUI,SApB3B,EAuBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvB3B,EA6BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA7B3B,EAuD4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvDtC,EA0DsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1DhC;AAAA;AAAA,8CAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SApB3B,0CAuBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvB3B,4IA6BiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IA7B3B,+uBAuD4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAvDtC,8DA0DsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1DhC;;+FAAA,EADF;;AAgHA,QAAMsB,uBAAuB,GAAG,MAC9B;AAAA,kDAUiB1B,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,EAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAb3B,EAmBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAnB3B,EA6C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7CtC,EAgDsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhDhC,aAAe,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDASeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATzB,EAYeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAZzB,EAkBeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAlBzB,EA4C0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA5CpC,EA+CoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA/C9B,aAAc,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA,kDAQeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SARzB,EAWeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAXzB,EAiBeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAjBzB,EA2C0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3CpC,EA8CoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9C9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,MAAM,CAAC,CAAD,CAAN,CAAUc,GAAV,CAAea,IAAD,IACb;AAAI,IAAA,GAAG,EAAE9B,MAAM,EAAf;AAAA,kDAMWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SANrB,EASWJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATrB,EAeWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAfrB,EAyCsBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzChC,EA4CgBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA5C1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBuB,IAApB,CADD,CADH,CAFF;AAAA;AAAA,cAUiB3B,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,EAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAb3B,EAmBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAnB3B,EA6C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7CtC,EAgDsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhDhC;AAAA;AAAA,8CAUiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,0CAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAb3B,4IAmBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAnB3B,+uBA6C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7CtC,8DAgDsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhDhC;;+FAAA,EADF;;AAsGA,QAAMwB,mBAAmB,GAAG,MAC1B;AAAA,kDAQiB5B,MAAM,CAAC,CAAD,CAAN,CAAUI,SAR3B,EAWiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAX3B,EAiBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAjB3B,EA2C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3CtC,EA8CsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9ChC,aAAe,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDAOeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAPzB,EAUeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAVzB,EAgBeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAhBzB,EA0C0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1CpC,EA6CoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7C9B,aAAc,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA,kDAMeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SANzB,EASeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATzB,EAeeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAfzB,EAyC0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzCpC,EA4CoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA5C9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,MAAM,CAAC,CAAD,CAAN,CAAUgB,KAAd,CAFF,EAGE;AAAA,kDAKehB,MAAM,CAAC,CAAD,CAAN,CAAUI,SALzB,EAQeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SARzB,EAceJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAdzB,EAwC0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAxCpC,EA2CoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3C9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,MAAM,CAAC,CAAD,CAAN,CAAUkB,WAAd,CAHF;AAAA;AAAA,cAQiBlB,MAAM,CAAC,CAAD,CAAN,CAAUI,SAR3B,EAWiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAX3B,EAiBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAjB3B,EA2C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3CtC,EA8CsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9ChC;AAAA;AAAA,8CAQiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAR3B,0CAWiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAX3B,4IAiBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAjB3B,+uBA2C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA3CtC,8DA8CsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9ChC;;+FAAA,EADF;;AAoGA,QAAMyB,sBAAsB,GAAG,MAC7B;AAAA,kDAWiB7B,MAAM,CAAC,CAAD,CAAN,CAAUI,SAX3B,EAciBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAd3B,EAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IApB3B,EA8C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9CtC,EAiDsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjDhC,aAAe,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDAUeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAVzB,EAaeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAbzB,EAmBeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAnBzB,EA6C0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7CpC,EAgDoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhD9B,aAAc,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA,kDASeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATzB,EAYeJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAZzB,EAkBeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAlBzB,EA4C0BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA5CpC,EA+CoBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA/C9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,MAAM,CAAC,CAAD,CAAN,CAAUc,GAAV,CAAegB,IAAD,IACb;AAAI,IAAA,GAAG,EAAEjC,MAAM,EAAf;AAAA,kDAOWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SAPrB,EAUWJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAVrB,EAgBWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAhBrB,EA0CsBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1ChC,EA6CgBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7C1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoB0B,IAApB,CADD,CADH,CAFF;AAAA;AAAA,cAWiB9B,MAAM,CAAC,CAAD,CAAN,CAAUI,SAX3B,EAciBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAd3B,EAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IApB3B,EA8C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9CtC,EAiDsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjDhC;AAAA;AAAA,8CAWiBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAX3B,0CAciBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAd3B,4IAoBiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IApB3B,+uBA8C4BZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA9CtC,8DAiDsBJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjDhC;;+FAAA,EADF;;AAuGA,QAAM2B,sBAAsB,GAAG,MAC7B;AAAA,kDAUiB/B,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,EAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAb3B,aAAe,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDASeZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATzB,EAYeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAZzB,aAAc,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA,kDAQeZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SARzB,EAWeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,MAAM,CAAC,CAAD,CAAN,CAAUc,GAAV,CAAekB,GAAD,IACb;AAAI,IAAA,GAAG,EAAEnC,MAAM,EAAf;AAAA,kDAMWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SANrB,EASWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBoB,GAApB,CADD,CADH,CAFF;AAAA;AAAA,cAUiBhC,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,EAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAb3B;AAAA;AAAA,8CAUiBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,2CAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAb3B;;+FAAA,EADF;;AA2BA,QAAMqB,oBAAoB,GAAG,MAC3B;AAAA,kDAUiBjC,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,EAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAb3B,aAAe,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDASeZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SATzB,EAYeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAZzB,aAAc,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA,kDAQeZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SARzB,EAWeJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,MAAM,CAAC,CAAD,CAAN,CAAUc,GAAV,CAAeoB,KAAD,IACb;AAAI,IAAA,GAAG,EAAErC,MAAM,EAAf;AAAA,kDAMWG,MAAM,CAAC,CAAD,CAAN,CAAUI,SANrB,EASWJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBsB,KAApB,CADD,CADH,CAFF;AAAA;AAAA,cAUiBlC,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,EAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAb3B;AAAA;AAAA,8CAUiBZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAV3B,2CAaiBJ,MAAM,CAAC,CAAD,CAAN,CAAUY,IAb3B;;+FAAA,EADF;;AA2BA,SACE;AAAA,kDAqCgCZ,MAAM,CAAC,CAAD,CAAN,CAAUI,SArC1C,EAsCmCJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAtC7C,EA2CiCJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MA3C3C,EA4CoCnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MA5C9C,aAAe,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDAoC8BpC,MAAM,CAAC,CAAD,CAAN,CAAUI,SApCxC,EAqCiCJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SArC3C,EA0C+BJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MA1CzC,EA2CkCnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MA3C5C,aAAe,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjC,gBAAgB,EADnB,EAEE;AAAA,kDAkC4BH,MAAM,CAAC,CAAD,CAAN,CAAUI,SAlCtC,EAmC+BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAnCzC,EAwC6BJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MAxCvC,EAyCgCnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MAzC1C,aAAe,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,kDAiC0BpC,MAAM,CAAC,CAAD,CAAN,CAAUI,SAjCpC,EAkC6BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAlCvC,EAuC2BJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MAvCrC,EAwC8BnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MAxCxC,aAAmB,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlC,iBAAiB,EADpB,EAEE;AAAA,kDA+BwBF,MAAM,CAAC,CAAD,CAAN,CAAUI,SA/BlC,EAgC2BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAhCrC,EAqCyBJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MArCnC,EAsC4BnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MAtCtC,aAAe,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG/B,gBAAgB,CAAC,cAAD,CADnB,CAFF,EAKE;AAAA,kDA4BwBL,MAAM,CAAC,CAAD,CAAN,CAAUI,SA5BlC,EA6B2BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA7BrC,EAkCyBJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MAlCnC,EAmC4BnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MAnCtC,aAAe,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8B/B,gBAAgB,CAAC,SAAD,CAA9C,CALF,EAMGe,sBAAsB,EANzB,CADF,EASE;AAAA,kDAyB0BpB,MAAM,CAAC,CAAD,CAAN,CAAUI,SAzBpC,EA0B6BJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SA1BvC,EA+B2BJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MA/BrC,EAgC8BnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MAhCxC,aAAmB,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,oBAAoB,EADvB,EAEGI,uBAAuB,EAF1B,EAGGE,mBAAmB,EAHtB,EAIGC,sBAAsB,EAJzB,EAKGE,sBAAsB,EALzB,EAMGE,oBAAoB,EANvB,CATF,CAFF,CADF;AAAA;AAAA,cAqCgCjC,MAAM,CAAC,CAAD,CAAN,CAAUI,SArC1C,EAsCmCJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAtC7C,EA2CiCJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MA3C3C,EA4CoCnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MA5C9C;AAAA;AAAA,6oBAqCgCpC,MAAM,CAAC,CAAD,CAAN,CAAUI,SArC1C,4BAsCmCJ,MAAM,CAAC,CAAD,CAAN,CAAUI,SAtC7C,8FA2CiCJ,MAAM,CAAC,CAAD,CAAN,CAAUmC,MA3C3C,8BA4CoCnC,MAAM,CAAC,CAAD,CAAN,CAAUoC,MA5C9C;;+FAAA,EADF;AAkGD,CAryBD;;AAuyBA,eAAerC,MAAf","sourcesContent":["import React, { Fragment } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport resume from \"../database/resume\";\n\nconst Resume = () => {\n  const values = Object.values(resume);\n\n  function renderSectionName() {\n    return (\n      <div className=\"name\">\n        <h1>{values[0]}</h1>\n        <style jsx>\n          {`\n            .name {\n              display: block;\n              font-size: 2.6rem;\n              padding-top: 1rem;\n              white-space: nowrap;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n\n  function renderSectionBtn() {\n    return (\n      <div className=\"btn-wrapper\">\n        <a className=\"btn-download\" href={values[10][1]} target=\"_blank\">\n          {values[10][0]}\n        </a>\n        <style jsx>\n          {`\n            a {\n              color: ${values[9].highlight};\n              text-decoration: none;\n              font-weight: 500;\n              display: block;\n              transition: all 0.15s;\n            }\n            a:hover {\n              transform: translateY(-3px);\n            }\n            .btn-wrapper {\n              position: sticky;\n              position: -webkit-sticky;\n              top: 4rem;\n            }\n            .btn-download {\n              display: inline-block;\n              position: relative;\n              left: -10rem;\n              white-space: nowrap;\n              color: white;\n              background-color: ${values[9].highlight};\n              padding: 0.5rem;\n              border-radius: 0 0.7rem 0 0.7rem;\n              box-shadow: ${values[9].highlight} 0 0 10px 0;\n            }\n            .btn-download:hover {\n              background-color: pink;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n\n  function renderExperience(expType) {\n    const renderifLocationExist = (exp) =>\n      exp.location && (\n        <Fragment>\n          , <span>{exp.location}</span>\n          <style jsx>\n            {`\n              span {\n                color: gray;\n                font-weight: 500;\n              }\n            `}\n          </style>\n        </Fragment>\n      );\n\n    const renderGithubLink = (exp, expType) => {\n      switch (expType) {\n        case \"professional\":\n          return \"\";\n        case \"project\":\n          return (\n            <Fragment>\n              -{\" \"}\n              <a\n                href={exp.link[1]}\n                target=\"_blank\"\n                rel=\"nofollow noopener noreferrer\"\n              >\n                {exp.link[0]}\n              </a>\n              <style jsx>\n                {`\n                  a {\n                    display: inline-block;\n                    font-size: 17px;\n                    text-decoration: none;\n                    position: relative;\n                    transition: all 0.15s;\n                  }\n                  a::after {\n                    position: absolute;\n                    height: 2px;\n                    width: 100%;\n                    margin: 0 auto;\n                    left: 0;\n                    right: 0;\n                    background: ${values[9].highlight};\n                    content: \"\";\n                    bottom: 0;\n                    /* animation */\n                    -o-transition: 0.15s;\n                    -ms-transition: 0.15s;\n                    -moz-transition: 0.15s;\n                    -webkit-transition: 0.15s;\n                    transition: 0.15s;\n                  }\n                  a:hover::after {\n                    width: 20%;\n                    background: red;\n                  }\n                  a:visited {\n                    color: black;\n                  }\n                  @media print {\n                    a[href]::before {\n                      display: inline-block;\n                      color: gray;\n                      font-size: 15px;\n                      font-weight: 500;\n                      content: \"(\" attr(href) \")\";\n                      white-space: nowrap;\n                    }\n                  }\n                `}\n              </style>\n            </Fragment>\n          );\n      }\n    };\n\n    return (\n      <Fragment>\n        <h3>{expType.toUpperCase()} EXPERIENCE</h3>\n        {values[3][expType].map((exp) => {\n          return (\n            <div key={uuidv4()} className=\"project\">\n              <h2 className=\"project-header\">\n                {`${exp.company} — ${exp.title}`}\n                {renderifLocationExist(exp)} {renderGithubLink(exp, expType)}\n              </h2>\n              <p>{exp.subTitle}</p>\n              <ul>\n                {exp.description.map((desc) => (\n                  <li key={uuidv4()}>{desc}</li>\n                ))}\n              </ul>\n            </div>\n          );\n        })}\n        <style jsx>\n          {`\n            h3 {\n              color: ${values[9].highlight};\n            }\n            h2 {\n              font-size: 20px;\n            }\n            ul {\n              margin-left: 15px;\n            }\n            li {\n              padding: 5px;\n              color: ${values[9].body};\n            }\n            span {\n              font-size: 17px;\n              color: gray;\n            }\n            .project {\n              margin: 10px;\n            }\n          `}\n        </style>\n      </Fragment>\n    );\n  }\n\n  const renderSectionEducation = () => (\n    <div className=\"education\">\n      <h3 className=\"highlight\">EDUCATION</h3>\n      <div className=\"education\">\n        <h2>\n          {values[2].school + \" \"}\n          <span>{values[2].location}</span>\n        </h2>\n        <p>{values[2].subTitle}</p>\n        <ul>\n          {values[2].description.map((desc) => (\n            <li key={uuidv4()}>{desc}</li>\n          ))}\n        </ul>\n      </div>\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          .highlight {\n            color: ${values[9].highlight};\n          }\n          span {\n            color: gray;\n            font-weight: 500;\n          }\n          ul {\n            margin-left: 15px;\n          }\n          li {\n            color: ${values[9].body};\n          }\n          h2 {\n            font-size: 20px;\n          }\n          .education {\n            margin: 10px 10px 0 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  const renderSectionContact = () => (\n    <div className=\"contact\">\n      <ul>\n        {values[1].links.map((link) => (\n          <li key={uuidv4()} className=\"hover\">\n            <a\n              href={link[1]}\n              target=\"_blank\"\n              rel=\"nofollow noopener noreferrer\"\n            >\n              {link[0]}\n            </a>\n          </li>\n        ))}\n        {values[1].notLinks.map((notLink) => (\n          <p key={uuidv4()}>{notLink}</p>\n        ))}\n      </ul>\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          a {\n            color: ${values[9].highlight};\n            text-decoration: none;\n            font-weight: 500;\n          }\n          li,\n          p {\n            color: ${values[9].body};\n          }\n          span {\n            color: gray;\n            font-size: 20px;\n          }\n          .background {\n            display: flex;\n            min-height: 100vh;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            padding: 6rem;\n          }\n          .btn-wrapper {\n            position: sticky;\n            position: -webkit-sticky;\n            top: 4rem;\n          }\n          .btn-download {\n            display: inline-block;\n            position: relative;\n            left: -10rem;\n            white-space: nowrap;\n            color: white;\n            background-color: ${values[9].highlight};\n            padding: 0.5rem;\n            border-radius: 0 0.7rem 0 0.7rem;\n            box-shadow: ${values[9].highlight} 0 0 10px 0;\n          }\n          .btn-download:hover {\n            background-color: pink;\n          }\n          .name {\n            display: block;\n            font-size: 2.6rem;\n            padding-top: 1rem;\n            white-space: nowrap;\n          }\n          .professional-exp {\n            padding-top: 4rem;\n          }\n          .page-content {\n            display: flex;\n            height: 100%;\n          }\n          .left-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-evenly;\n          }\n          .right-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-between;\n          }\n          .contact {\n            font-size: 14px;\n            margin: 9px 0 20px 15px;\n            white-space: nowrap;\n          }\n          a {\n            display: block;\n            transition: all 0.15s;\n          }\n          a:hover {\n            transform: translateY(-3px);\n          }\n          .subsection {\n            padding: 15px;\n          }\n          .title {\n            margin-bottom: 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  const renderSectionTechnology = () => (\n    <div className=\"technology subsection\">\n      <h3 className=\"title\">TECHNOLOGY</h3>\n      <ul>\n        {values[4].map((tech) => (\n          <li key={uuidv4()}>{tech}</li>\n        ))}\n      </ul>\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          a {\n            color: ${values[9].highlight};\n            text-decoration: none;\n            font-weight: 500;\n          }\n          li,\n          p {\n            color: ${values[9].body};\n          }\n          span {\n            color: gray;\n            font-size: 20px;\n          }\n          .background {\n            display: flex;\n            min-height: 100vh;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            padding: 6rem;\n          }\n          .btn-wrapper {\n            position: sticky;\n            position: -webkit-sticky;\n            top: 4rem;\n          }\n          .btn-download {\n            display: inline-block;\n            position: relative;\n            left: -10rem;\n            white-space: nowrap;\n            color: white;\n            background-color: ${values[9].highlight};\n            padding: 0.5rem;\n            border-radius: 0 0.7rem 0 0.7rem;\n            box-shadow: ${values[9].highlight} 0 0 10px 0;\n          }\n          .btn-download:hover {\n            background-color: pink;\n          }\n          .name {\n            display: block;\n            font-size: 2.6rem;\n            padding-top: 1rem;\n            white-space: nowrap;\n          }\n          .professional-exp {\n            padding-top: 4rem;\n          }\n          .page-content {\n            display: flex;\n            height: 100%;\n          }\n          .left-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-evenly;\n          }\n          .right-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-between;\n          }\n          .contact {\n            font-size: 14px;\n            margin: 9px 0 20px 15px;\n            white-space: nowrap;\n          }\n          a {\n            display: block;\n            transition: all 0.15s;\n          }\n          a:hover {\n            transform: translateY(-3px);\n          }\n          .subsection {\n            padding: 15px;\n          }\n          .title {\n            margin-bottom: 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  const renderSectionHonors = () => (\n    <div className=\"honors subsection\">\n      <h3 className=\"title\">HONORS</h3>\n      <p>{values[5].title}</p>\n      <p>{values[5].description}</p>\n\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          a {\n            color: ${values[9].highlight};\n            text-decoration: none;\n            font-weight: 500;\n          }\n          li,\n          p {\n            color: ${values[9].body};\n          }\n          span {\n            color: gray;\n            font-size: 20px;\n          }\n          .background {\n            display: flex;\n            min-height: 100vh;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            padding: 6rem;\n          }\n          .btn-wrapper {\n            position: sticky;\n            position: -webkit-sticky;\n            top: 4rem;\n          }\n          .btn-download {\n            display: inline-block;\n            position: relative;\n            left: -10rem;\n            white-space: nowrap;\n            color: white;\n            background-color: ${values[9].highlight};\n            padding: 0.5rem;\n            border-radius: 0 0.7rem 0 0.7rem;\n            box-shadow: ${values[9].highlight} 0 0 10px 0;\n          }\n          .btn-download:hover {\n            background-color: pink;\n          }\n          .name {\n            display: block;\n            font-size: 2.6rem;\n            padding-top: 1rem;\n            white-space: nowrap;\n          }\n          .professional-exp {\n            padding-top: 4rem;\n          }\n          .page-content {\n            display: flex;\n            height: 100%;\n          }\n          .left-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-evenly;\n          }\n          .right-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-between;\n          }\n          .contact {\n            font-size: 14px;\n            margin: 9px 0 20px 15px;\n            white-space: nowrap;\n          }\n          a {\n            display: block;\n            transition: all 0.15s;\n          }\n          a:hover {\n            transform: translateY(-3px);\n          }\n          .subsection {\n            padding: 15px;\n          }\n          .title {\n            margin-bottom: 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  const renderSectionLanguages = () => (\n    <div className=\"languages subsection\">\n      <h3 className=\"title\">LANGUAGES</h3>\n      <ul>\n        {values[6].map((lang) => (\n          <li key={uuidv4()}>{lang}</li>\n        ))}\n      </ul>\n\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          a {\n            color: ${values[9].highlight};\n            text-decoration: none;\n            font-weight: 500;\n          }\n          li,\n          p {\n            color: ${values[9].body};\n          }\n          span {\n            color: gray;\n            font-size: 20px;\n          }\n          .background {\n            display: flex;\n            min-height: 100vh;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            padding: 6rem;\n          }\n          .btn-wrapper {\n            position: sticky;\n            position: -webkit-sticky;\n            top: 4rem;\n          }\n          .btn-download {\n            display: inline-block;\n            position: relative;\n            left: -10rem;\n            white-space: nowrap;\n            color: white;\n            background-color: ${values[9].highlight};\n            padding: 0.5rem;\n            border-radius: 0 0.7rem 0 0.7rem;\n            box-shadow: ${values[9].highlight} 0 0 10px 0;\n          }\n          .btn-download:hover {\n            background-color: pink;\n          }\n          .name {\n            display: block;\n            font-size: 2.6rem;\n            padding-top: 1rem;\n            white-space: nowrap;\n          }\n          .professional-exp {\n            padding-top: 4rem;\n          }\n          .page-content {\n            display: flex;\n            height: 100%;\n          }\n          .left-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-evenly;\n          }\n          .right-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-between;\n          }\n          .contact {\n            font-size: 14px;\n            margin: 9px 0 20px 15px;\n            white-space: nowrap;\n          }\n          a {\n            display: block;\n            transition: all 0.15s;\n          }\n          a:hover {\n            transform: translateY(-3px);\n          }\n          .subsection {\n            padding: 15px;\n          }\n          .title {\n            margin-bottom: 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  const renderSectionInterests = () => (\n    <div className=\"interests subsection\">\n      <h3 className=\"title\">INTERESTS</h3>\n      <ul>\n        {values[7].map((int) => (\n          <li key={uuidv4()}>{int}</li>\n        ))}\n      </ul>\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          li {\n            color: ${values[9].body};\n          }\n          .subsection {\n            padding: 15px;\n          }\n          .title {\n            margin-bottom: 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  const renderSectionHobbies = () => (\n    <div className=\"hobbies subsection\">\n      <h3 className=\"title\">HOBBIES</h3>\n      <ul>\n        {values[8].map((hobby) => (\n          <li key={uuidv4()}>{hobby}</li>\n        ))}\n      </ul>\n      <style jsx>\n        {`\n          h3 {\n            color: ${values[9].highlight};\n          }\n          li {\n            color: ${values[9].body};\n          }\n          .subsection {\n            padding: 15px;\n          }\n          .title {\n            margin-bottom: 10px;\n          }\n        `}\n      </style>\n    </div>\n  );\n\n  return (\n    <div className=\"background\">\n      <div className=\"page\">\n        {renderSectionBtn()}\n        <div className=\"page-content\">\n          <section className=\"left-column\">\n            {renderSectionName()}\n            <div className=\"professional-exp\">\n              {renderExperience(\"professional\")}\n            </div>\n            <div className=\"project-exp\">{renderExperience(\"project\")}</div>\n            {renderSectionEducation()}\n          </section>\n          <section className=\"right-column\">\n            {renderSectionContact()}\n            {renderSectionTechnology()}\n            {renderSectionHonors()}\n            {renderSectionLanguages()}\n            {renderSectionInterests()}\n            {renderSectionHobbies()}\n          </section>\n        </div>\n      </div>\n      <style jsx>\n        {`\n          .background {\n            display: flex;\n            min-height: 100vh;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            padding: 6rem;\n          }\n          .page {\n            display: flex;\n            zoom: 0.75;\n            flex-direction: column;\n            border-top: 7px solid ${values[9].highlight};\n            border-bottom: 7px solid ${values[9].highlight};\n            padding: 4.3rem;\n            padding-top: 1.53rem;\n            max-width: 1200px;\n            line-height: 1.8;\n            border-left: 1px solid ${values[9].border};\n            box-shadow 10px 10px 10px ${values[9].shadow};\n            height: 100%;\n          }\n          .professional-exp {\n            padding-top: 4rem;\n          }\n          .page-content {\n            display: flex;\n            height: 100%;\n          }\n          .left-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-evenly;\n          }\n          .right-column {\n            display: flex;\n            min-height: 100%;\n            flex-direction: column;\n            justify-content: space-between;\n          }\n          @media only screen and (max-width: 900px) {\n            .background {\n              padding: 0;\n            }\n            .page {\n              padding: 1.2rem;\n            }\n            .page-content {\n              flex-direction: column;\n            }\n            .professional-exp {\n              padding: 0;\n            }\n          }\n          @media print {\n            .background {\n              padding: 0;\n            }\n            .page {\n              border-left: none;\n              box-shadow: none;\n              line-height: 1.5;\n            }\n            .professional-exp {\n              padding-top: 48px;\n            }\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default Resume;\n"]},"metadata":{},"sourceType":"module"}